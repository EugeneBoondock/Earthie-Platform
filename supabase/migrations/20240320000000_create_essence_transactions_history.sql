-- Create enum for transaction types
CREATE TYPE transaction_type AS ENUM (
  'MINT',
  'BURN',
  'WITHDRAWAL',
  'DEPOSIT',
  'BUY',
  'SELL',
  'TRANSFER'
);

-- Create the essence transactions history table
CREATE TABLE IF NOT EXISTS essence_transactions_history (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  transaction_hash VARCHAR(66) NOT NULL UNIQUE,
  block_number BIGINT NOT NULL DEFAULT 0,
  timestamp TIMESTAMPTZ NOT NULL,
  from_address VARCHAR(42) NOT NULL,
  to_address VARCHAR(42) NOT NULL,
  value TEXT NOT NULL, -- Changed from NUMERIC to TEXT to store exact string values
  transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('MINT', 'BURN', 'WITHDRAWAL', 'DEPOSIT', 'BUY', 'SELL', 'TRANSFER')),
  gas_used NUMERIC(78, 0) DEFAULT 0,
  gas_price NUMERIC(78, 0) DEFAULT 0,
  method_id VARCHAR(10) DEFAULT '',
  method_name VARCHAR(100) DEFAULT '',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_essence_tx_timestamp ON essence_transactions_history(timestamp);
CREATE INDEX IF NOT EXISTS idx_essence_tx_type ON essence_transactions_history(transaction_type);
CREATE INDEX IF NOT EXISTS idx_essence_tx_from ON essence_transactions_history(from_address);
CREATE INDEX IF NOT EXISTS idx_essence_tx_to ON essence_transactions_history(to_address);

-- Create aggregated stats table for quick access to important metrics
CREATE TABLE IF NOT EXISTS essence_stats_daily (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  date DATE NOT NULL UNIQUE,
  total_minted NUMERIC(36, 18) NOT NULL DEFAULT 0,
  total_burned NUMERIC(36, 18) NOT NULL DEFAULT 0,
  total_withdrawn NUMERIC(36, 18) NOT NULL DEFAULT 0,
  total_deposited NUMERIC(36, 18) NOT NULL DEFAULT 0,
  total_bought NUMERIC(36, 18) NOT NULL DEFAULT 0,
  total_sold NUMERIC(36, 18) NOT NULL DEFAULT 0,
  unique_buyers INT NOT NULL DEFAULT 0,
  unique_sellers INT NOT NULL DEFAULT 0,
  transaction_count INT NOT NULL DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create index for date lookups
CREATE INDEX IF NOT EXISTS idx_essence_stats_date ON essence_stats_daily(date);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_essence_tx_modtime
    BEFORE UPDATE ON essence_transactions_history
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_essence_stats_modtime
    BEFORE UPDATE ON essence_stats_daily
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create materialized view for quick access to total stats
CREATE MATERIALIZED VIEW essence_total_stats AS
SELECT
    COALESCE(SUM(CASE WHEN transaction_type = 'MINT' THEN value ELSE 0 END), 0) as total_minted,
    COALESCE(SUM(CASE WHEN transaction_type = 'BURN' THEN value ELSE 0 END), 0) as total_burned,
    COALESCE(SUM(CASE WHEN transaction_type = 'WITHDRAWAL' THEN value ELSE 0 END), 0) as total_withdrawn,
    COALESCE(SUM(CASE WHEN transaction_type = 'DEPOSIT' THEN value ELSE 0 END), 0) as total_deposited,
    COALESCE(SUM(CASE WHEN transaction_type = 'BUY' THEN value ELSE 0 END), 0) as total_bought,
    COALESCE(SUM(CASE WHEN transaction_type = 'SELL' THEN value ELSE 0 END), 0) as total_sold,
    COUNT(DISTINCT CASE WHEN transaction_type = 'BUY' THEN from_address END) as unique_buyers_all_time,
    COUNT(DISTINCT CASE WHEN transaction_type = 'SELL' THEN from_address END) as unique_sellers_all_time,
    COUNT(*) as total_transactions
FROM essence_transactions_history;

-- Create function to refresh materialized view
CREATE OR REPLACE FUNCTION refresh_essence_total_stats()
RETURNS TRIGGER AS $$
BEGIN
    REFRESH MATERIALIZED VIEW CONCURRENTLY essence_total_stats;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create trigger to refresh materialized view
CREATE TRIGGER refresh_essence_total_stats_trigger
    AFTER INSERT OR UPDATE OR DELETE ON essence_transactions_history
    FOR EACH STATEMENT
    EXECUTE FUNCTION refresh_essence_total_stats();

-- Create sync status table for tracking progress
CREATE TABLE IF NOT EXISTS essence_sync_status (
  id INTEGER PRIMARY KEY,
  last_sync TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_timestamp BIGINT NOT NULL DEFAULT 0,
  transactions_processed BIGINT NOT NULL DEFAULT 0,
  has_more BOOLEAN NOT NULL DEFAULT true
); 