-- Drop existing policies if they exist
drop policy if exists "Allow public read access" on public.essence_transactions;
drop policy if exists "Allow public insert access" on public.essence_transactions;
drop policy if exists "Users can view their own transactions" on public.essence_transactions;

-- Create the essence transactions table if it doesn't exist
create table if not exists public.essence_transactions (
    id bigint generated by default as identity primary key,
    wallet_address text not null,
    hash text not null,
    "from" text not null,
    "to" text not null,
    value numeric not null,
    timestamp bigint not null,
    transaction_type text not null, -- 'WITHDRAWAL', 'DEPOSIT', 'BOUGHT', 'SOLD', 'TRANSFER'
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    
    -- Constraints
    unique(wallet_address, hash)
);

-- Update the transaction_type constraint
do $$ 
begin
    -- Drop the existing constraint if it exists
    alter table public.essence_transactions 
    drop constraint if exists valid_transaction_type;
    
    -- Add the new constraint
    alter table public.essence_transactions 
    add constraint valid_transaction_type 
    check (transaction_type in ('WITHDRAWAL', 'DEPOSIT', 'BOUGHT', 'SOLD', 'TRANSFER'));
exception
    when others then null; -- Ignore any errors
end $$;

-- Create index for faster queries if it doesn't exist
create index if not exists essence_transactions_wallet_address_idx on public.essence_transactions(wallet_address);

-- Enable RLS
alter table public.essence_transactions enable row level security;

-- Create new policies with unrestricted access
create policy "Allow public read access"
    on public.essence_transactions
    for select
    using (true);

create policy "Allow public insert access"
    on public.essence_transactions
    for insert
    with check (true);

-- Create policy to allow read access to wallet's own transactions
create policy "Users can view their own transactions"
    on public.essence_transactions
    for select
    using (auth.uid() in (
        select id from auth.users 
        where wallet_address = essence_transactions.wallet_address
    )); 